{"version":3,"file":"static/js/406.8e759a34.chunk.js","mappings":"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","sources":["components/CastListItem/CastListItem.styled.js","components/CastListItem/CastListItem.jsx","components/CastList/CastList.styled.js","components/CastList/CastList.jsx","components/Cast/Cast.jsx","hooks/useFetch.js","utils/TMDBService.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  display: grid;\n  grid-template-rows: auto auto 1fr; /* Зарезервировать место под изображение */\n  gap: 8px; /* Пространство между элементами */\n`;\n\nexport const Thumbnail = styled.div`\n  width: 100%;\n  height: 0;\n  padding-bottom: 150%; /* Соотношение сторон 1:1.5 для резервирования места под изображение */\n  position: relative;\n  text-align: center;\n\n  img {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n`;\n","import React from 'react';\nimport { Thumbnail, ListItem } from './CastListItem.styled';\n\nfunction CastListItem({ actor }) {\n  return (\n    <ListItem key={actor.id}>\n      {actor.profile_path ? (\n        <Thumbnail className=\"thumb\">\n          <img\n            src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\n            alt={actor.name}\n          />\n        </Thumbnail>\n      ) : (\n        <Thumbnail>No image available</Thumbnail>\n      )}\n      <h3>{actor.name}</h3>\n      <p>Character: {actor.character}</p>\n    </ListItem>\n  );\n}\n\nexport default CastListItem;\n","import styled from '@emotion/styled';\nexport const CastListContainer = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 20px; /* Пространство между элементами */\n\n  @media (max-width: 1200px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n\n  @media (max-width: 800px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (max-width: 600px) {\n    grid-template-columns: 1fr;\n  }\n`;\n","import React from 'react';\nimport CastListItem from 'components/CastListItem';\nimport { CastListContainer } from './CastList.styled';\n\nfunction CastList({ cast }) {\n  if (!cast || cast.length === 0) {\n    return <p>No cast information available.</p>;\n  }\n  if (!Array.isArray(cast)) {\n    return <p>Cast data is not valid.</p>;\n  }\n  return (\n    <div>\n      <h1>Cast</h1>\n      <CastListContainer>\n        {cast.map(actor => (\n          <CastListItem key={actor.id} actor={actor} />\n        ))}\n      </CastListContainer>\n    </div>\n  );\n}\n\nexport default CastList;\n","import { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useFetch } from 'hooks/useFetch';\nimport tmdbService from 'utils/TMDBService';\nimport CastList from 'components/CastList';\nimport Loader from 'components/Loader';\n\nfunction Cast() {\n  const { isFetching, data, error, fetchData } = useFetch();\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchData(tmdbService.getMovieCredits(movieId));\n  }, [fetchData, movieId]);\n\n  const cast = data?.cast;\n  console.log(cast);\n\n  if (isFetching) {\n    return <Loader open={true} />;\n  }\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  return <CastList cast={cast} />;\n}\n\nexport default Cast;\n","import { useCallback, useState } from 'react';\r\n\r\nexport const useFetch = () => {\r\n  const [isFetching, setIsFetching] = useState(false);\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState('');\r\n\r\n  const fetchData = useCallback(async requestFunction => {\r\n    setIsFetching(true);\r\n    try {\r\n      const data = await requestFunction;\r\n\r\n      setData(data);\r\n    } catch (e) {\r\n      setError(e);\r\n    } finally {\r\n      setIsFetching(false);\r\n    }\r\n  }, []);\r\n\r\n  return { isFetching, data, error, fetchData };\r\n};\r\n","import axios from 'axios';\r\n\r\nconst API_KEY = 'aa1de53af4f58d0982608e428ee96b57';\r\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w300/';\r\n\r\nclass TMDBService {\r\n  constructor() {\r\n    this.axiosInstance = axios.create({\r\n      baseURL: 'https://api.themoviedb.org/3',\r\n      params: {\r\n        api_key: API_KEY,\r\n      },\r\n    });\r\n  }\r\n\r\n  async getTrendingMovies(timeWindow = 'day') {\r\n    try {\r\n      const response = await this.axiosInstance.get(\r\n        `/trending/all/${timeWindow}`\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка при отриманні списку популярних фільмів ', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async searchMovies(query) {\r\n    try {\r\n      const response = await this.axiosInstance.get('/search/movie', {\r\n        params: {\r\n          query: query,\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка при пошуку фільму', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMovieDetails(movieId) {\r\n    try {\r\n      const response = await this.axiosInstance.get(`/movie/${movieId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка під час отримання додаткової інформації', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMovieImage(imagePath) {\r\n    try {\r\n      const fullImgUrl = `${IMAGE_BASE_URL}${imagePath}`;\r\n      const response = await axios.get(fullImgUrl, { responseType: 'blob' });\r\n      return URL.createObjectURL(response.data);\r\n    } catch (error) {\r\n      console.error('Помилка під час завантаження зображення', error);\r\n    }\r\n  }\r\n\r\n  async getMovieCredits(movieId) {\r\n    try {\r\n      const response = await this.axiosInstance.get(\r\n        `/movie/${movieId}/credits`\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка при отриманні акторського складу:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMovieReviews(movieId) {\r\n    try {\r\n      const response = await this.axiosInstance.get(\r\n        `/movie/${movieId}/reviews`\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка при отриманні відгуків про фільм:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new TMDBService();\r\n"],"names":["ListItem","styled","_templateObject","_taggedTemplateLiteral","Thumbnail","_templateObject2","_ref","actor","_jsxs","children","profile_path","_jsx","className","src","concat","alt","name","character","id","CastListContainer","cast","length","Array","isArray","map","CastListItem","_useFetch","useFetch","isFetching","data","error","fetchData","movieId","useParams","useEffect","tmdbService","console","log","Loader","open","CastList","_useState","useState","_useState2","_slicedToArray","setIsFetching","_useState3","_useState4","setData","_useState5","_useState6","setError","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","requestFunction","_data","wrap","_context","prev","next","sent","t0","finish","stop","_x","apply","arguments","TMDBService","_classCallCheck","this","axiosInstance","axios","baseURL","params","api_key","_createClass","key","value","_getTrendingMovies","timeWindow","response","_args","undefined","get","abrupt","_searchMovies","_callee2","query","_context2","_getMovieDetails","_callee3","_context3","_x2","_getMovieImage","_callee4","imagePath","fullImgUrl","_context4","responseType","URL","createObjectURL","_x3","_getMovieCredits","_callee5","_context5","_x4","_getMovieReviews","_callee6","_context6","_x5"],"sourceRoot":""}