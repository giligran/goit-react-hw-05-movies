{"version":3,"file":"static/js/406.3f4a0f4d.chunk.js","mappings":"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","sources":["components/CastListItem/CastListItem.styled.js","components/CastListItem/CastListItem.jsx","components/CastList/CastList.styled.js","components/CastList/CastList.jsx","components/Cast/Cast.jsx","hooks/useFetch.js","utils/TMDBService.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  display: grid;\n  grid-template-rows: auto auto 1fr; /* Зарезервировать место под изображение */\n  gap: 8px; /* Пространство между элементами */\n`;\n\nexport const Thumbnail = styled.div`\n  width: 100%;\n  height: 0;\n  padding-bottom: 150%; /* Соотношение сторон 1:1.5 для резервирования места под изображение */\n  position: relative;\n  text-align: center;\n\n  img {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Thumbnail, ListItem } from './CastListItem.styled';\n\nfunction CastListItem({ actor }) {\n  return (\n    <ListItem key={actor.id}>\n      {actor.profile_path ? (\n        <Thumbnail className=\"thumb\">\n          <img\n            src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\n            alt={actor.name}\n          />\n        </Thumbnail>\n      ) : (\n        <Thumbnail>No image available</Thumbnail>\n      )}\n      <h3>{actor.name}</h3>\n      <p>Character: {actor.character}</p>\n    </ListItem>\n  );\n}\n\nCastListItem.propTypes = {\n  actor: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    character: PropTypes.string.isRequired,\n    profile_path: PropTypes.string,\n  }).isRequired,\n};\n\nexport default CastListItem;\n","import styled from '@emotion/styled';\nexport const CastListContainer = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 20px; /* Пространство между элементами */\n\n  @media (max-width: 1200px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n\n  @media (max-width: 800px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (max-width: 600px) {\n    grid-template-columns: 1fr;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CastListItem from 'components/CastListItem';\nimport { CastListContainer } from './CastList.styled';\n\nfunction CastList({ cast }) {\n  if (!cast || cast.length === 0) {\n    return <p>No cast information available.</p>;\n  }\n  if (!Array.isArray(cast)) {\n    return <p>Cast data is not valid.</p>;\n  }\n  return (\n    <div>\n      <h1>Cast</h1>\n      <CastListContainer>\n        {cast.map(actor => (\n          <CastListItem key={actor.id} actor={actor} />\n        ))}\n      </CastListContainer>\n    </div>\n  );\n}\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n\nexport default CastList;\n","import { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useFetch } from 'hooks/useFetch';\nimport tmdbService from 'utils/TMDBService';\nimport CastList from 'components/CastList';\nimport Loader from 'components/Loader';\n\nfunction Cast() {\n  const { isFetching, data, error, fetchData } = useFetch();\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchData(tmdbService.getMovieCredits(movieId));\n  }, [fetchData, movieId]);\n\n  const cast = data?.cast;\n\n  if (isFetching) {\n    return <Loader open={true} />;\n  }\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  return <CastList cast={cast} />;\n}\n\nexport default Cast;\n","import { useCallback, useState } from 'react';\r\n\r\nexport const useFetch = () => {\r\n  const [isFetching, setIsFetching] = useState(false);\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState('');\r\n\r\n  const fetchData = useCallback(async requestFunction => {\r\n    setIsFetching(true);\r\n    try {\r\n      const data = await requestFunction;\r\n\r\n      setData(data);\r\n    } catch (e) {\r\n      setError(e);\r\n    } finally {\r\n      setIsFetching(false);\r\n    }\r\n  }, []);\r\n\r\n  return { isFetching, data, error, fetchData };\r\n};\r\n","import axios from 'axios';\r\n\r\nconst API_KEY = 'aa1de53af4f58d0982608e428ee96b57';\r\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w300/';\r\n\r\nclass TMDBService {\r\n  constructor() {\r\n    this.axiosInstance = axios.create({\r\n      baseURL: 'https://api.themoviedb.org/3',\r\n      params: {\r\n        api_key: API_KEY,\r\n      },\r\n    });\r\n  }\r\n\r\n  async getTrendingMovies(timeWindow = 'day') {\r\n    try {\r\n      const response = await this.axiosInstance.get(\r\n        `/trending/all/${timeWindow}`\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка при отриманні списку популярних фільмів ', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async searchMovies(query) {\r\n    try {\r\n      const response = await this.axiosInstance.get('/search/movie', {\r\n        params: {\r\n          query: query,\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка при пошуку фільму', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMovieDetails(movieId) {\r\n    try {\r\n      const response = await this.axiosInstance.get(`/movie/${movieId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка під час отримання додаткової інформації', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMovieImage(imagePath) {\r\n    try {\r\n      const fullImgUrl = `${IMAGE_BASE_URL}${imagePath}`;\r\n      const response = await axios.get(fullImgUrl, { responseType: 'blob' });\r\n      return URL.createObjectURL(response.data);\r\n    } catch (error) {\r\n      console.error('Помилка під час завантаження зображення', error);\r\n    }\r\n  }\r\n\r\n  async getMovieCredits(movieId) {\r\n    try {\r\n      const response = await this.axiosInstance.get(\r\n        `/movie/${movieId}/credits`\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка при отриманні акторського складу:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMovieReviews(movieId) {\r\n    try {\r\n      const response = await this.axiosInstance.get(\r\n        `/movie/${movieId}/reviews`\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка при отриманні відгуків про фільм:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new TMDBService();\r\n"],"names":["ListItem","styled","_templateObject","_taggedTemplateLiteral","Thumbnail","_templateObject2","_ref","actor","_jsxs","children","profile_path","_jsx","className","src","concat","alt","name","character","id","CastListContainer","cast","length","Array","isArray","map","CastListItem","_useFetch","useFetch","isFetching","data","error","fetchData","movieId","useParams","useEffect","tmdbService","Loader","open","CastList","_useState","useState","_useState2","_slicedToArray","setIsFetching","_useState3","_useState4","setData","_useState5","_useState6","setError","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","requestFunction","_data","wrap","_context","prev","next","sent","t0","finish","stop","_x","apply","arguments","TMDBService","_classCallCheck","this","axiosInstance","axios","baseURL","params","api_key","_createClass","key","value","_getTrendingMovies","timeWindow","response","_args","undefined","get","abrupt","console","_searchMovies","_callee2","query","_context2","_getMovieDetails","_callee3","_context3","_x2","_getMovieImage","_callee4","imagePath","fullImgUrl","_context4","responseType","URL","createObjectURL","_x3","_getMovieCredits","_callee5","_context5","_x4","_getMovieReviews","_callee6","_context6","_x5"],"sourceRoot":""}