{"version":3,"file":"static/js/122.126a8bc4.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.jsx","hooks/useFetch.js","utils/TMDBService.js"],"sourcesContent":["import { useFetch } from 'hooks/useFetch';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport tmdbService from 'utils/TMDBService';\nimport Loader from 'components/Loader/Loader';\n\nfunction Reviews() {\n  const { isFetching, data: reviews, error, fetchData } = useFetch();\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchData(tmdbService.getMovieReviews(movieId));\n  }, [fetchData, movieId]);\n  console.log(reviews);\n\n  if (isFetching) {\n    return <Loader open={true} />;\n  }\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  return (\n    <div>\n      <h1>Reviews</h1>\n      {reviews && reviews.results && reviews.results.length > 0 ? (\n        <ul>\n          {reviews.results.map(review => (\n            <li key={review.id}>\n              <h3>Author: {review.author}</h3>\n              <p>{review.content}</p>\n              <p>Rating: {review.author_details.rating}</p>\n              <p>\n                Published: {new Date(review.created_at).toLocaleDateString()}\n              </p>\n              <a href={review.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                Read more\n              </a>\n              <hr />\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No reviews available.</p>\n      )}\n    </div>\n  );\n}\n\nexport default Reviews;\n","import { useCallback, useState } from 'react';\r\n\r\nexport const useFetch = () => {\r\n  const [isFetching, setIsFetching] = useState(false);\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState('');\r\n\r\n  const fetchData = useCallback(async requestFunction => {\r\n    setIsFetching(true);\r\n    try {\r\n      const data = await requestFunction;\r\n\r\n      setData(data);\r\n    } catch (e) {\r\n      setError(e);\r\n    } finally {\r\n      setIsFetching(false);\r\n    }\r\n  }, []);\r\n\r\n  return { isFetching, data, error, fetchData };\r\n};\r\n","import axios from 'axios';\r\n\r\nconst API_KEY = 'aa1de53af4f58d0982608e428ee96b57';\r\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w300/';\r\n\r\nclass TMDBService {\r\n  constructor() {\r\n    this.axiosInstance = axios.create({\r\n      baseURL: 'https://api.themoviedb.org/3',\r\n      params: {\r\n        api_key: API_KEY,\r\n      },\r\n    });\r\n  }\r\n\r\n  async getTrendingMovies(timeWindow = 'day') {\r\n    try {\r\n      const response = await this.axiosInstance.get(\r\n        `/trending/all/${timeWindow}`\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка при отриманні списку популярних фільмів ', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async searchMovies(query) {\r\n    try {\r\n      const response = await this.axiosInstance.get('/search/movie', {\r\n        params: {\r\n          query: query,\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка при пошуку фільму', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMovieDetails(movieId) {\r\n    try {\r\n      const response = await this.axiosInstance.get(`/movie/${movieId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка під час отримання додаткової інформації', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMovieImage(imagePath) {\r\n    try {\r\n      const fullImgUrl = `${IMAGE_BASE_URL}${imagePath}`;\r\n      const response = await axios.get(fullImgUrl, { responseType: 'blob' });\r\n      return URL.createObjectURL(response.data);\r\n    } catch (error) {\r\n      console.error('Помилка під час завантаження зображення', error);\r\n    }\r\n  }\r\n\r\n  async getMovieCredits(movieId) {\r\n    try {\r\n      const response = await this.axiosInstance.get(\r\n        `/movie/${movieId}/credits`\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка при отриманні акторського складу:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMovieReviews(movieId) {\r\n    try {\r\n      const response = await this.axiosInstance.get(\r\n        `/movie/${movieId}/reviews`\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка при отриманні відгуків про фільм:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new TMDBService();\r\n"],"names":["_useFetch","useFetch","isFetching","reviews","data","error","fetchData","movieId","useParams","useEffect","tmdbService","console","log","_jsx","Loader","open","children","_jsxs","results","length","map","review","author","content","author_details","rating","Date","created_at","toLocaleDateString","href","url","target","rel","id","_useState","useState","_useState2","_slicedToArray","setIsFetching","_useState3","_useState4","setData","_useState5","_useState6","setError","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","requestFunction","_data","wrap","_context","prev","next","sent","t0","finish","stop","_x","apply","arguments","TMDBService","_classCallCheck","this","axiosInstance","axios","baseURL","params","api_key","_createClass","key","value","_getTrendingMovies","timeWindow","response","_args","undefined","get","concat","abrupt","_searchMovies","_callee2","query","_context2","_getMovieDetails","_callee3","_context3","_x2","_getMovieImage","_callee4","imagePath","fullImgUrl","_context4","responseType","URL","createObjectURL","_x3","_getMovieCredits","_callee5","_context5","_x4","_getMovieReviews","_callee6","_context6","_x5"],"sourceRoot":""}