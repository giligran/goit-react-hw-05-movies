{"version":3,"file":"static/js/134.731c5d36.chunk.js","mappings":"kNAmBA,I,EAAA,EAjBA,SAA2BA,GAAa,IAADC,EAATC,EAAKF,EAALE,MACtBC,GAAWC,EAAAA,EAAAA,MACjB,IAAKF,EACH,OAAO,KAGT,IAAMG,EAAkB,QAAbJ,EAAGC,EAAMI,YAAI,IAAAL,EAAAA,EAAIC,EAAMG,MAElC,OACEE,EAAAA,EAAAA,KAAA,MAAAC,UACED,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACC,GAAE,WAAAC,OAAaT,EAAMU,IAAMC,MAAO,CAAEC,KAAMX,GAAWK,SACxDH,KAIT,E,SCfaU,E,QAAqBC,EAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qEC2B3C,MAzBA,SAAuBlB,GAAiC,IAA9BmB,EAAKnB,EAALmB,MAAOC,EAAUpB,EAAVoB,WAAYC,EAAMrB,EAANqB,OAC3C,OACEd,EAAAA,EAAAA,KAAA,OAAAC,SACGY,GACCb,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CAACC,MAAM,KAEdhB,EAAAA,EAAAA,KAACQ,EAAkB,CAAAP,SAChBa,GAAUA,EAAOG,OAAS,EACzBH,EAAOI,KAAI,SAAAvB,GAAK,OACdK,EAAAA,EAAAA,KAACmB,EAAkB,CAEjBxB,MAAOA,EACPiB,MAAOA,EACPC,WAAYA,GAHPlB,EAAMU,GAIX,KAGJL,EAAAA,EAAAA,KAAA,KAAAC,SAAG,4BAMf,C,mGCzBamB,EAAW,WACtB,IAAAC,GAAoCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA5CR,EAAUU,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAAwBJ,EAAAA,EAAAA,UAAS,MAAKK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAA/BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA0BR,EAAAA,EAAAA,UAAS,IAAGS,GAAAP,EAAAA,EAAAA,GAAAM,EAAA,GAA/BlB,EAAKmB,EAAA,GAAEC,EAAQD,EAAA,GAEhBE,GAAYC,EAAAA,EAAAA,aAAW,eAAAzC,GAAA0C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAC,EAAMC,GAAe,IAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAC7B,OAApBnB,GAAc,GAAMiB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAECL,EAAgB,KAAD,EAA5BX,EAAIc,EAAAG,KAEVhB,EAAQD,GAAMc,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAI,GAAAJ,EAAA,SAEdV,EAAQU,EAAAI,IAAI,QAES,OAFTJ,EAAAC,KAAA,GAEZlB,GAAc,GAAOiB,EAAAK,OAAA,6BAAAL,EAAAM,OAAA,GAAAV,EAAA,wBAExB,gBAAAW,GAAA,OAAAxD,EAAAyD,MAAA,KAAAC,UAAA,EAX4B,GAW1B,IAEH,MAAO,CAAEtC,WAAAA,EAAYe,KAAAA,EAAMhB,MAAAA,EAAOqB,UAAAA,EACpC,C,uGCmCA,UAjDA,WAAmB,IAADmB,EAChBC,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAA/B,EAAAA,EAAAA,GAAA6B,EAAA,GAAlDG,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAC9BG,EAAiC,QAA5BN,EAAGI,EAAaG,IAAI,gBAAQ,IAAAP,EAAAA,EAAI,GAE3CQ,GAA2DxC,EAAAA,EAAAA,KAAnDP,EAAU+C,EAAV/C,WAAkBgD,EAAUD,EAAhBhC,KAAkBhB,EAAKgD,EAALhD,MAAOqB,EAAS2B,EAAT3B,WAE7C6B,EAAAA,EAAAA,YAAU,WACJJ,GACFzB,EAAU8B,EAAAA,EAAAA,aAAyBL,GAEvC,GAAG,CAACA,EAAOzB,IAEX,IAiBMnB,EAAmB,OAAV+C,QAAU,IAAVA,OAAU,EAAVA,EAAYG,QAE3B,OACEC,EAAAA,EAAAA,MAAA,WAAAhE,SAAA,EACEgE,EAAAA,EAAAA,MAAA,QAAMC,SArBiB,SAAAC,GACzBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cAEVZ,IAILW,EAAKE,QACLtC,EAAU8B,EAAAA,EAAAA,aAAyBL,IACrC,EAWuCzD,SAAA,EACjCD,EAAAA,EAAAA,KAAA,SAAOwE,QAAQ,cAAavE,SAAC,aAC7BD,EAAAA,EAAAA,KAAA,SACEyE,KAAK,OACLpE,GAAG,cACHqE,YAAY,sBACZC,SAAU,SAAAR,GAAC,OAfO,SAAAT,GAExBD,EAD6B,KAAVC,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEjD,CAYuBkB,CAAkBT,EAAEU,OAAOC,MAAM,EAChDC,aAAa,SAEf/E,EAAAA,EAAAA,KAAA,UAAQyE,KAAK,SAAQxE,SAAC,eAExBD,EAAAA,EAAAA,KAACgF,EAAAA,EAAc,CAACpE,MAAOA,EAAOC,WAAYA,EAAYC,OAAQA,MAGpE,C,6ECjDMmE,EAAW,WACf,SAAAA,KAAcC,EAAAA,EAAAA,GAAA,KAAAD,GACZE,KAAKC,cAAgBC,EAAAA,EAAAA,OAAa,CAChCC,QAAS,+BACTC,OAAQ,CACNC,QARQ,qCAWd,CAsEC,OAtEAC,EAAAA,EAAAA,GAAAR,EAAA,EAAAS,IAAA,oBAAAZ,MAAA,eAAAa,GAAAxD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAC,IAAA,IAAAsD,EAAAC,EAAAC,EAAA3C,UAAA,OAAAf,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAA0C,OAAlBgD,EAAUE,EAAA7E,OAAA,QAAA8E,IAAAD,EAAA,GAAAA,EAAA,GAAG,MAAKpD,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEfuC,KAAKC,cAAczB,IAAI,iBAADvD,OAC1BwF,IACjB,KAAD,EAFa,OAARC,EAAQnD,EAAAG,KAAAH,EAAAsD,OAAA,SAGPH,EAASjE,MAAI,OAEqD,MAFrDc,EAAAC,KAAA,EAAAD,EAAAI,GAAAJ,EAAA,SAEpBuD,QAAQrF,MAAM,qQAAkD8B,EAAAI,IAASJ,EAAAI,GAAA,yBAAAJ,EAAAM,OAAA,GAAAV,EAAA,kBAG5E,yBAAAqD,EAAAzC,MAAA,KAAAC,UAAA,EAZA,IAYA,CAAAuC,IAAA,eAAAZ,MAAA,eAAAoB,GAAA/D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA8D,EAAmBzC,GAAK,IAAAmC,EAAA,OAAAzD,EAAAA,EAAAA,KAAAK,MAAA,SAAA2D,GAAA,cAAAA,EAAAzD,KAAAyD,EAAAxD,MAAA,cAAAwD,EAAAzD,KAAA,EAAAyD,EAAAxD,KAAA,EAEGuC,KAAKC,cAAczB,IAAI,gBAAiB,CAC7D4B,OAAQ,CACN7B,MAAOA,KAER,KAAD,EAJY,OAARmC,EAAQO,EAAAvD,KAAAuD,EAAAJ,OAAA,SAKPH,EAASjE,MAAI,OAE8B,MAF9BwE,EAAAzD,KAAA,EAAAyD,EAAAtD,GAAAsD,EAAA,SAEpBH,QAAQrF,MAAM,0IAA2BwF,EAAAtD,IAASsD,EAAAtD,GAAA,yBAAAsD,EAAApD,OAAA,GAAAmD,EAAA,kBAGrD,gBAAAlD,GAAA,OAAAiD,EAAAhD,MAAA,KAAAC,UAAA,EAdA,IAcA,CAAAuC,IAAA,kBAAAZ,MAAA,eAAAuB,GAAAlE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAiE,EAAsBC,GAAO,IAAAV,EAAA,OAAAzD,EAAAA,EAAAA,KAAAK,MAAA,SAAA+D,GAAA,cAAAA,EAAA7D,KAAA6D,EAAA5D,MAAA,cAAA4D,EAAA7D,KAAA,EAAA6D,EAAA5D,KAAA,EAEFuC,KAAKC,cAAczB,IAAI,UAADvD,OAAWmG,IAAW,KAAD,EAApD,OAARV,EAAQW,EAAA3D,KAAA2D,EAAAR,OAAA,SACPH,EAASjE,MAAI,OAEoD,MAFpD4E,EAAA7D,KAAA,EAAA6D,EAAA1D,GAAA0D,EAAA,SAEpBP,QAAQrF,MAAM,oQAAiD4F,EAAA1D,IAAS0D,EAAA1D,GAAA,yBAAA0D,EAAAxD,OAAA,GAAAsD,EAAA,kBAG3E,gBAAAG,GAAA,OAAAJ,EAAAnD,MAAA,KAAAC,UAAA,EAVA,IAUA,CAAAuC,IAAA,gBAAAZ,MAAA,eAAA4B,GAAAvE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAsE,EAAoBC,GAAS,IAAAC,EAAAhB,EAAA,OAAAzD,EAAAA,EAAAA,KAAAK,MAAA,SAAAqE,GAAA,cAAAA,EAAAnE,KAAAmE,EAAAlE,MAAA,OAEuB,OAFvBkE,EAAAnE,KAAA,EAEnBkE,EAAU,GAAAzG,OAlDC,oCAkDmBA,OAAGwG,GAASE,EAAAlE,KAAA,EACzByC,EAAAA,EAAAA,IAAUwB,EAAY,CAAEE,aAAc,SAAU,KAAD,EAAxD,OAARlB,EAAQiB,EAAAjE,KAAAiE,EAAAd,OAAA,SACPgB,IAAIC,gBAAgBpB,EAASjE,OAAK,OAAAkF,EAAAnE,KAAA,EAAAmE,EAAAhE,GAAAgE,EAAA,SAEzCb,QAAQrF,MAAM,yNAAyCkG,EAAAhE,IAAS,yBAAAgE,EAAA9D,OAAA,GAAA2D,EAAA,kBAEnE,gBAAAO,GAAA,OAAAR,EAAAxD,MAAA,KAAAC,UAAA,EAVA,IAUA,CAAAuC,IAAA,kBAAAZ,MAAA,eAAAqC,GAAAhF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA+E,EAAsBb,GAAO,IAAAV,EAAA,OAAAzD,EAAAA,EAAAA,KAAAK,MAAA,SAAA4E,GAAA,cAAAA,EAAA1E,KAAA0E,EAAAzE,MAAA,cAAAyE,EAAA1E,KAAA,EAAA0E,EAAAzE,KAAA,EAEFuC,KAAKC,cAAczB,IAAI,UAADvD,OACjCmG,EAAO,aACjB,KAAD,EAFa,OAARV,EAAQwB,EAAAxE,KAAAwE,EAAArB,OAAA,SAGPH,EAASjE,MAAI,OAE8C,MAF9CyF,EAAA1E,KAAA,EAAA0E,EAAAvE,GAAAuE,EAAA,SAEpBpB,QAAQrF,MAAM,gOAA2CyG,EAAAvE,IAASuE,EAAAvE,GAAA,yBAAAuE,EAAArE,OAAA,GAAAoE,EAAA,kBAGrE,gBAAAE,GAAA,OAAAH,EAAAjE,MAAA,KAAAC,UAAA,EAZA,IAYA,CAAAuC,IAAA,kBAAAZ,MAAA,eAAAyC,GAAApF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAmF,EAAsBjB,GAAO,IAAAV,EAAA,OAAAzD,EAAAA,EAAAA,KAAAK,MAAA,SAAAgF,GAAA,cAAAA,EAAA9E,KAAA8E,EAAA7E,MAAA,cAAA6E,EAAA9E,KAAA,EAAA8E,EAAA7E,KAAA,EAEFuC,KAAKC,cAAczB,IAAI,UAADvD,OACjCmG,EAAO,aACjB,KAAD,EAFa,OAARV,EAAQ4B,EAAA5E,KAAA4E,EAAAzB,OAAA,SAGPH,EAASjE,MAAI,OAE8C,MAF9C6F,EAAA9E,KAAA,EAAA8E,EAAA3E,GAAA2E,EAAA,SAEpBxB,QAAQrF,MAAM,2NAA2C6G,EAAA3E,IAAS2E,EAAA3E,GAAA,yBAAA2E,EAAAzE,OAAA,GAAAwE,EAAA,kBAGrE,gBAAAE,GAAA,OAAAH,EAAArE,MAAA,KAAAC,UAAA,EAZA,MAYA8B,CAAA,CA9Ec,GAiFjB,QAAmBA,C","sources":["components/FilmCollectionItem/FilmCollectionItem.jsx","components/FilmCollection/FilmCollection.styled.js","components/FilmCollection/FilmCollection.jsx","hooks/useFetch.js","pages/Movies.jsx","utils/TMDBService.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nfunction FilmCollectionItem({ movie }) {\n  const location = useLocation();\n  if (!movie) {\n    return null;\n  }\n\n  const title = movie.name ?? movie.title;\n\n  return (\n    <li>\n      <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n        {title}\n      </Link>\n    </li>\n  );\n}\n\nexport default FilmCollectionItem;\n","import styled from '@emotion/styled';\n\nexport const FilmCollectionList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n","import Loader from 'components/Loader/Loader';\nimport FilmCollectionItem from '../FilmCollectionItem';\nimport { FilmCollectionList } from './FilmCollection.styled';\n\nfunction FilmCollection({ error, isFetching, movies }) {\n  return (\n    <div>\n      {isFetching ? (\n        <Loader open={true} />\n      ) : (\n        <FilmCollectionList>\n          {movies && movies.length > 0 ? (\n            movies.map(movie => (\n              <FilmCollectionItem\n                key={movie.id}\n                movie={movie}\n                error={error}\n                isFetching={isFetching}\n              />\n            ))\n          ) : (\n            <p>No movies available.</p>\n          )}\n        </FilmCollectionList>\n      )}\n    </div>\n  );\n}\n\nexport default FilmCollection;\n","import { useCallback, useState } from 'react';\r\n\r\nexport const useFetch = () => {\r\n  const [isFetching, setIsFetching] = useState(false);\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState('');\r\n\r\n  const fetchData = useCallback(async requestFunction => {\r\n    setIsFetching(true);\r\n    try {\r\n      const data = await requestFunction;\r\n\r\n      setData(data);\r\n    } catch (e) {\r\n      setError(e);\r\n    } finally {\r\n      setIsFetching(false);\r\n    }\r\n  }, []);\r\n\r\n  return { isFetching, data, error, fetchData };\r\n};\r\n","import { useSearchParams } from 'react-router-dom';\r\n\r\nimport { useFetch } from 'hooks/useFetch';\r\nimport tmdbService from 'utils/TMDBService';\r\nimport FilmCollection from 'components/FilmCollection';\r\nimport { useEffect } from 'react';\r\n\r\nfunction Movies() {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const query = searchParams.get('query') ?? '';\r\n\r\n  const { isFetching, data: moviesList, error, fetchData } = useFetch();\r\n\r\n  useEffect(() => {\r\n    if (query) {\r\n      fetchData(tmdbService.searchMovies(query));\r\n    }\r\n  }, [query, fetchData]);\r\n\r\n  const handleSearchSubmit = e => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    form.reset();\r\n    fetchData(tmdbService.searchMovies(query));\r\n  };\r\n\r\n  const updateQueryString = query => {\r\n    const nextParams = query !== '' ? { query } : {};\r\n    setSearchParams(nextParams);\r\n  };\r\n\r\n  const movies = moviesList?.results;\r\n\r\n  return (\r\n    <section>\r\n      <form onSubmit={handleSearchSubmit}>\r\n        <label htmlFor=\"searchInput\">Search:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"searchInput\"\r\n          placeholder=\"Enter a search term\"\r\n          onChange={e => updateQueryString(e.target.value)}\r\n          autoComplete=\"off\"\r\n        />\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n      <FilmCollection error={error} isFetching={isFetching} movies={movies} />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Movies;\r\n","import axios from 'axios';\r\n\r\nconst API_KEY = 'aa1de53af4f58d0982608e428ee96b57';\r\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w300/';\r\n\r\nclass TMDBService {\r\n  constructor() {\r\n    this.axiosInstance = axios.create({\r\n      baseURL: 'https://api.themoviedb.org/3',\r\n      params: {\r\n        api_key: API_KEY,\r\n      },\r\n    });\r\n  }\r\n\r\n  async getTrendingMovies(timeWindow = 'day') {\r\n    try {\r\n      const response = await this.axiosInstance.get(\r\n        `/trending/all/${timeWindow}`\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка при отриманні списку популярних фільмів ', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async searchMovies(query) {\r\n    try {\r\n      const response = await this.axiosInstance.get('/search/movie', {\r\n        params: {\r\n          query: query,\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка при пошуку фільму', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMovieDetails(movieId) {\r\n    try {\r\n      const response = await this.axiosInstance.get(`/movie/${movieId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка під час отримання додаткової інформації', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMovieImage(imagePath) {\r\n    try {\r\n      const fullImgUrl = `${IMAGE_BASE_URL}${imagePath}`;\r\n      const response = await axios.get(fullImgUrl, { responseType: 'blob' });\r\n      return URL.createObjectURL(response.data);\r\n    } catch (error) {\r\n      console.error('Помилка під час завантаження зображення', error);\r\n    }\r\n  }\r\n\r\n  async getMovieCredits(movieId) {\r\n    try {\r\n      const response = await this.axiosInstance.get(\r\n        `/movie/${movieId}/credits`\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка при отриманні акторського складу:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMovieReviews(movieId) {\r\n    try {\r\n      const response = await this.axiosInstance.get(\r\n        `/movie/${movieId}/reviews`\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Помилка при отриманні відгуків про фільм:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new TMDBService();\r\n"],"names":["_ref","_movie$name","movie","location","useLocation","title","name","_jsx","children","Link","to","concat","id","state","from","FilmCollectionList","styled","_templateObject","_taggedTemplateLiteral","error","isFetching","movies","Loader","open","length","map","FilmCollectionItem","useFetch","_useState","useState","_useState2","_slicedToArray","setIsFetching","_useState3","_useState4","data","setData","_useState5","_useState6","setError","fetchData","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","requestFunction","_data","wrap","_context","prev","next","sent","t0","finish","stop","_x","apply","arguments","_searchParams$get","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","query","get","_useFetch","moviesList","useEffect","tmdbService","results","_jsxs","onSubmit","e","preventDefault","form","currentTarget","reset","htmlFor","type","placeholder","onChange","updateQueryString","target","value","autoComplete","FilmCollection","TMDBService","_classCallCheck","this","axiosInstance","axios","baseURL","params","api_key","_createClass","key","_getTrendingMovies","timeWindow","response","_args","undefined","abrupt","console","_searchMovies","_callee2","_context2","_getMovieDetails","_callee3","movieId","_context3","_x2","_getMovieImage","_callee4","imagePath","fullImgUrl","_context4","responseType","URL","createObjectURL","_x3","_getMovieCredits","_callee5","_context5","_x4","_getMovieReviews","_callee6","_context6","_x5"],"sourceRoot":""}